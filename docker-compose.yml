version: '3'

services:
  # MySQL 컨테이너 설정
  # TODO : 추후, 네트워킹을 통해 DB 레플리카 혹은 샤딩 진행해보기.
  mysql:
    image: mysql:latest
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    # RDB 의 볼륨 마운트 설정
    volumes:
      - mysql_data:/var/lib/mysql

  # MongoDB 컨테이너 설정
  mongodb:
    image: mongo:latest
    container_name: mongodb-container
    ports:
      - "27017:27017"
    # NoSQL 의 볼륨 마운트 설정
    volumes:
      - mongodb_data:/data/db

  # Redis Cache 컨테이너 설정
#  redis:
#    image: redis:latest
#    container_name: redis-container
#    ports:
#      - "6379:6379"

  redis-master-1:
    container_name: redis-master-1
    image: redis:latest
    # network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:7001:7001"
    volumes:
      - ./redis-master-1.conf:/etc/redis-master-1.conf
    command:
      redis-server /etc/redis-master-1.conf

  redis-master-2:
    container_name: redis-master-2
    image: redis:latest
    # network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:7002:7002"
    volumes:
      - ./redis-master-2.conf:/etc/redis-master-2.conf
    command:
      redis-server /etc/redis-master-2.conf

  redis-master-3:
    container_name: redis-master-3
    image: redis:latest
    # network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:7003:7003"
    volumes:
      - ./redis-master-3.conf:/etc/redis-master-3.conf
    command:
      redis-server /etc/redis-master-3.conf

  redis-replica-1:
    container_name: redis-replica-1
    image: redis:latest
    # network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:7004:7004"
    volumes:
      - ./redis-replica-1.conf:/etc/redis-replica-1.conf
    command:
      redis-server /etc/redis-replica-1.conf

  redis-replica-2:
    container_name: redis-replica-2
    image: redis:latest
    # network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:7005:7005"
    volumes:
      - ./redis-replica-2.conf:/etc/redis-replica-2.conf
    command:
      redis-server /etc/redis-replica-2.conf

  redis-replica-3:
    container_name: redis-replica-3
    image: redis:latest
    # network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:7006:7006"
    volumes:
      - ./redis-replica-3.conf:/etc/redis-replica-3.conf
    command:
      redis-server /etc/redis-replica-3.conf

  redis_cluster:
    image: redis:latest
    container_name: redis_cluster
    platform: linux/arm64/v8
    # network_mode: "host"
    command: redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-yes --cluster-replicas 1
    depends_on:
      - redis-master-1
      - redis-master-2
      - redis-master-3
      - redis-replica-1
      - redis-replica-2
      - redis-replica-3

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    # network_mode: "host"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "127.0.0.1:9090:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    # network_mode: "host"
    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

# 볼륨에 대한 실제 디렉토리 자동 생성
volumes:
  mysql_data:
  mongodb_data:
  prom_data:
