name: Java CI with Gradle # workflow 이름

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'


    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1

    - name: make application.yml
      run: |
        cd needeachother/src/main/resources

        # application.yml 파일 생성하기
        touch ./application-db.yml
        touch ./application-jwt.yml
        touch ./application-oauth.yml

        # Secrets에 저장한 값을 application.yml 파일에 쓰기
        echo "${{ secrets.SPRINGBOOT_MYSQL }}" >> ./application-db.yml
        echo "${{ secrets.SPRINGBOOT_JWT }}" >> ./application-jwt.yml
        echo "${{ secrets.SPRINGBOOT_OAUTH }}" >> ./application-oauth.yml

      shell: bash


    - name: Build with Gradle
      run: |
        cd needeachother
        ./gradlew bootJar

    
    ## 도커 이미지 빌드 후 도커허브에 push하기
    - name: web docker build and push
      run: |
        cd needeachother
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPOSITORY }} .
        docker push ${{ secrets.DOCKER_REPOSITORY }}
